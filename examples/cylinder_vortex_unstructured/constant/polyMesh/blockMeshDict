/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
	(0	0.5	-0.5)
	(0	150	-0.5)
	(0	-150	-0.5)
	(0	-0.5	-0.5)
        (0	0.5	0.5)
        (0	150	0.5)
        (0	-150	0.5)
        (0	-0.5	0.5)
        (0	0.5	-0.5)
        (0	150	-0.5)
        (0	-150	-0.5)
        (0	-0.5	-0.5)
        (0	0.5	0.5)
        (0	150	0.5)
        (0	-150	0.5)
        (0	-0.5	0.5)
);

blocks
(
	hex (1 0 3 2 5 4 7 6)		      (1000   350   1)	       simpleGrading    (((0.936454849498328 0.8 1) (0.0635451505016722 0.2 0.028995309019073))    1   1)
        hex (10 11 8 9 14 15 12 13)           (1000   350   1)         simpleGrading    (((0.936454849498328 0.8 1) (0.0635451505016722 0.2 0.028995309019073))    1   1)
);

edges
(
        arc 1 2    (150		0	-0.5)
	arc 3 0    (0.5		0	-0.5)
	arc 5 6    (150		0       0.5)
	arc 7 4    (0.5		0	0.5) 
        arc 11 8   (-0.5	0	-0.5)
        arc 9 10   (-150	0	-0.5)
        arc 15 12  (-0.5	0	0.5)
        arc 13 14  (-150	0	0.5)
);

boundary
(
parete              
        {
            type wall;    // patch type for patch 0
            faces
            (
                (0 4 7 3)  // block face in this patch
		(8 12 15 11)
            );
        }                  // end of 0th patch definition

outflow
        {
            type patch;  
            faces
            (
                (1 5 6 2) 
            );
        }                 

inflow
        {
            type patch;
            faces
            (
                (9 13 14 10)
            );
        }

frontAndBackPlanes
        {
            type empty;
            faces
            (
                (0 1 2 3)
		(10 11 8 9)
                (4 5 6 7)
                (14 15 13 12)
            );
        }

rm_1
        {
            type patch;
            faces
            (
                (0 1 4 5)
                (2 3 6 7)
            );
        }

rm_2
        {
            type patch;
            faces
            (
                (8 9 12 13)
                (10 11 14 15)
            );
        }

);

mergePatchPairs
    (
        ( rm_1 rm_2 ) // merge patch pair 0
    );

// ************************************************************************* //
